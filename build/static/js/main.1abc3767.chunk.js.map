{"version":3,"sources":["components/images/87266475-stock-vector-thumbs-up-cute-refrigerator-character-cartoon.jpg","logo.svg","components/fridge.js","components/recipes.js","components/landingpage.js","components/upload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Fridge","props","state","items","console","log","axios","get","then","res","data","setState","map","ex","id","_id","food","foodID","exp","expiryDate","this","Navbar","bg","variant","Brand","href","Nav","className","Link","columns","name","selector","sortable","width","maxWidth","right","defaultPageSize","React","Component","Recipes","LandingPage","class","role","Container","src","fridgepic","height","Create","handleInputChange","e","target","value","handleSubmit","preventDefault","item","alert","fetch","method","headers","body","JSON","stringify","onSubmit","style","type","placeholder","onChange","App","exact","path","component","Upload","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1abc3767.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/87266475-stock-vector-thumbs-up-cute-refrigerator-character-cartoon.9f1921d2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Nav, Navbar, ListGroup} from 'react-bootstrap';\nimport axios from 'axios';\nimport cors from 'cors';\nimport ReactTable from 'react-data-table-component';\n\n\nclass Fridge extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state={\n      items:[]\n    };\n  }\n\n\n  componentDidMount(){\n    console.log('gothegere');\n    axios.get('http://localhost:5000/api/items')\n         .then(res => {\n            console.log(res.data);\n            // let data = res.data.map(ex => {\n            //   return ex.foodID, ex.expiryDate];\n            // });\n            this.setState({\n              items: res.data.map(ex => {\n                let obj = {id: ex._id, food: ex.foodID, exp: ex.expiryDate};\n                return obj;\n              }),\n            });\n          });\n          console.log(this.state);\n  }\n\n  render(){\n    //const itemz = this.state.items.map(item => {item[0], item[1]});\n    //console.log(items);\n    const columns = [\n      {\n        name: 'Id',\n        selector: 'id',\n        sortable: false,\n        width: '20%',\n        maxWidth: '30%',\n      },\n      {\n        name: 'Food Item',\n        selector: 'food',\n        sortable: true,\n        width: '40%',\n        maxWidth: '40%',\n      },\n      {\n        name: 'Expiration Date',\n        selector: 'exp',\n        sortable: true,\n        right: true,\n        width: '20%',\n        maxWidth: '30%',\n      },\n    ];\n\n\n    const data = this.state.items;\n    return(\n      <div>\n      <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Free Your Fridge</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Home</Nav.Link>\n          <Nav.Link href=\"/upload\">Upload</Nav.Link>\n          <Nav.Link href=\"/fridge\"> My Fridge</Nav.Link>\n          <Nav.Link href=\"/recipes\">Recipes</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <br />\n          </>\n      <center>\n      <header>\n      <br />\n      <br />\n      <h1>Items in Fridge</h1>\n      </header>\n      <br />\n        <div>\n          <ReactTable\n            columns= {columns}\n            data={data}\n            defaultPageSize={10}\n          />\n        </div>\n      </center>\n  </div>\n\n    );\n  }\n}\nexport default Fridge\n","import React from 'react';\nimport { Nav, Navbar} from 'react-bootstrap';\n\nclass Recipes extends React.Component{\n  render(){\n    return(\n      <div>\n               <>\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Free Your Fridge</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"/\">Home</Nav.Link>\n      <Nav.Link href=\"/upload\">Upload</Nav.Link>\n      <Nav.Link href=\"/fridge\"> My Fridge</Nav.Link>\n      <Nav.Link href=\"/recipes\">Recipes</Nav.Link>\n    </Nav>\n  </Navbar>\n  <br />\n      </>\n      <header> Recommended Recipes\n      </header>\n      </div>\n    );\n\n  }\n}\n\nexport default Recipes\n","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Fridge from './fridge';\nimport Recipes from './recipes';\nimport Container from 'react-bootstrap/Container';\nimport fridgepic from './images/87266475-stock-vector-thumbs-up-cute-refrigerator-character-cartoon.jpg';\nimport { Nav, Navbar} from 'react-bootstrap';\n\n\nclass LandingPage extends React.Component{\n  render(){\n    return(\n\n      <div>\n\n      <body class=\"text-center\">\n\n      <header class=\"masthead mb-auto\">\n        <div class=\"inner\">\n\n          <>\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Free Your Fridge</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"/\">Home</Nav.Link>\n      <Nav.Link href=\"/upload\">Upload</Nav.Link>\n      <Nav.Link href=\"/fridge\"> My Fridge</Nav.Link>\n      <Nav.Link href=\"/recipes\">Recipes</Nav.Link>\n    </Nav>\n  </Navbar>\n  <br />\n      </>\n      </div>\n      </header>\n\n      <main role=\"main\" class=\"inner cover\">\n      <br />\n      <br />\n        <h1 class=\"cover-heading\">Don't Let Your Food Go to Waste</h1>\n        <br />\n        <br />\n        <Container>\n        <text> whatsinmyfridge is an application that keeps track of the\n        items in your fridge and notifies you of expiry dates.<br/>\n         Take a photo of the expiration date and upload a photo of the food, or type it in manually!</text>\n\n         <br />\n         <br />\n        </Container>\n        <img src = {fridgepic} width = '450' height = '450'/>\n      </main>\n\n      <footer class=\"mastfoot mt-auto\">\n        <div class=\"inner\">\n        </div>\n      </footer>\n\n\n\n    </body>\n    </div>\n    );\n  }\n}\n\nexport default LandingPage\n","import React, { Component } from 'react';\nimport { Nav, Navbar, ListGroup} from 'react-bootstrap';\nimport axios from 'axios';\n\nclass Create extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      foodID: '',\n      expiryDate: '',\n    };\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { foodID, expiryDate } = this.state;\n    const item = {\n      foodID,\n      expiryDate\n    };\n\n    alert(`submitted! ${item.foodID}`);\n\n    fetch(`http://localhost:5000/api/items`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      body: JSON.stringify(item)\n    })\n    //alert(process.env.PORT || 3001);\n    // axios\n    //   .post('http://localhost:5000/api/items', item)\n    //   .then(() => console.log('Entry Created'))\n    //   .catch(err => {\n    //     console.error(err);\n    //   });\n    //\n    // const options = {\n    //   method: 'POST',\n    //   headers: { 'content-type': 'application/x-www-form-urlencoded' },\n    //   data: item,\n    //   url,\n    // };\n    // axios(options);\n  };\n\n  render() {\n    return (\n      <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Free Your Fridge</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Home</Nav.Link>\n          <Nav.Link href=\"/upload\">Upload</Nav.Link>\n          <Nav.Link href=\"/fridge\"> My Fridge</Nav.Link>\n          <Nav.Link href=\"/recipes\">Recipes</Nav.Link>\n        </Nav>\n      </Navbar>\n        <br />\n        <center>\n        <br />\n        <br />\n        <h1>Enter a fridge item and its expiration date</h1>\n        <br />\n        <br />\n        <div class=\"container\">\n          <form onSubmit={this.handleSubmit}>\n            <div style={{ width: '60%' }} className=\"form-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"foodID\"\n                placeholder=\"Enter your Food...\"\n                onChange={this.handleInputChange}\n              />\n            </div>\n            <br />\n            <div style={{ width: '60%' }} className=\"form-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"expiryDate\"\n                placeholder=\"Enter the expiry date...\"\n                onChange={this.handleInputChange}\n              />\n            </div>\n            <br />\n            <div style={{ width: '60%' }}>\n              <button className=\"btn btn-success\" type=\"submit\">\n                Submit\n              </button>\n            </div>\n          </form>\n\n        </div>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default Create;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LandingPage from './components/landingpage';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Fridge from './components/fridge';\nimport Recipes from './components/recipes';\nimport Upload from './components/upload';\n\nfunction App() {\n  return (\n  <BrowserRouter>\n    <Switch>\n    <Route exact path = '/' component = {LandingPage}/>\n    <Route path =\"/fridge\" component = {Fridge}/>\n    <Route path =\"/recipes\" component = {Recipes}/>\n    <Route path =\"/upload\" component = {Upload}/>\n\n    </Switch>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}